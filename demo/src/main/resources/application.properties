spring.profiles.active=local

spring.application.name=demopet
server.port=5556
spring.main.banner-mode=off
spring.jackson.serialization.fail-on-empty-beans=false
spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.properties.hibernate.default_schema=sample

spring.jpa.hibernate.ddl-auto=update
#applciation context path
server.servlet.contextPath=/
springdoc.paths-to-exclude = /audit/**

#Liquibase
#spring.liquibase.change-log=classpath:db/changelog/db.changelog-master.xml

# SLF4J is a facade for logging frameworks
# Spring Boot overrides the default logging level of Logback by setting the root logger to info
logging.level.root=WARN
logging.level.org.springframework.web=DEBUG
logging.level.org.hibernate=ERROR
logging.level.org.hibernate.type.descriptor.sql=TRACE

logging.file=src/main/java/com/fastcode/demopet/logging/spring-boot-logging.txt
logging.file.max-history=2
logging.file.max-size=2000KB

# Enable SSL

# The format used for the keystore for openid testing
#server.ssl.key-store-type=PKCS12
# The path to the keystore containing the certificate
#server.ssl.key-store=classpath:keystore.p12
# The password used to generate the certificate
#server.ssl.key-store-password=Rfhh8ek2
# The alias mapped to the certificate
#server.ssl.key-alias=tomcat

fastCode.auth.method=database
fastCode.usertable.name = null

spring.mail.default-encoding=UTF-8
spring.mail.host=smtp.gmail.com
spring.mail.username=info@righthire.com
spring.mail.password=KavitaKavya001
spring.mail.port=587
spring.mail.protocol=smtp
spring.mail.test-connection=false
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000

flowable.mail.server.host=smtp.gmail.com
flowable.mail.server.port=587
flowable.mail.server.username=info@righthire.com
flowable.mail.server.password=KavitaKavya001
flowable.mail.server.smtp.starttls.enable=true
flowable.mail.server.use-tls=true

mjmlFile.base.dir= emailBuilderFiles
mjmlFile.path=${mjmlFile.base.dir}/%s.mjml

spring.main.allow-bean-definition-overriding=true

fastCode.jobs.default=com.fastcode.demopet.scheduler.jobs
fastCode.offset.default=0
fastCode.limit.default=10
fastCode.sort.direction.default=ASC
#fastCode.sort.property.default=id









# Use the Spring Security 5 Delegating Password encoder by default
flowable.idm.password-encoder=spring_delegating

########Flowable Properties Setup

#server.port=9999
#server.servlet.context-path=/flowable-task
#management.endpoints.jmx.unique-names=true
# This is needed to force use of JDK proxies instead of using CGLIB
#spring.aop.proxy-target-class=false
#spring.aop.auto=false
#spring.application.name=flowable-ui-task
#spring.banner.location=classpath:/org/flowable/spring/boot/flowable-banner.txt
# The default domain for generating ObjectNames must be specified. Otherwise when multiple Spring Boot applications start in the same servlet container
# all would be created with the same name (com.zaxxer.hikari:name=dataSource,type=HikariDataSource) for example
#spring.jmx.default-domain=${spring.application.name}
#
# SECURITY
#
spring.security.filter.dispatcher-types=REQUEST,FORWARD,ASYNC

# Expose all actuator endpoints to the web
# They are exposed, but only authenticated users can see /info and /health abd users with access-admin can see the others
#management.endpoints.web.exposure.include=*
# Full health details should only be displayed when a user is authorized
#management.endpoint.health.show-details=when_authorized
# Only users with role access-admin can access full health details
#management.endpoint.health.roles=access-admin
# Spring prefixes the roles with ROLE_. However, Flowable does not have that concept yet, so we need to override that with an empty string
#flowable.common.app.role-prefix=

#
# DATABASE
#

#spring.datasource.driver-class-name=org.h2.Driver
#spring.datasource.url=jdbc:h2:~/flowable-db/db;AUTO_SERVER=TRUE;AUTO_SERVER_PORT=9091;DB_CLOSE_DELAY=-1

#spring.datasource.driver-class-name=com.mysql.jdbc.Driver
#spring.datasource.url=jdbc:mysql://127.0.0.1:3306/flowable?characterEncoding=UTF-8

#spring.datasource.driver-class-name=org.postgresql.Driver
#spring.datasource.url=jdbc:postgresql://localhost:5432/flowable

#spring.datasource.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver
#spring.datasource.url=jdbc:sqlserver://localhost:1433;databaseName=flowablea

#spring.datasource.driver-class-name=oracle.jdbc.driver.OracleDriver
#spring.datasource.url=jdbc:oracle:thin:@localhost:1521:FLOWABLE

#spring.datasource.driver-class-name=com.ibm.db2.jcc.DB2Driver
#spring.datasource.url=jdbc:db2://localhost:50000/flowable

#spring.datasource.username=flowable
#spring.datasource.password=flowable

# JNDI CONFIG

# If uncommented, the datasource will be looked up using the configured JNDI name.
# This will have preference over any datasource configuration done below that doesn't use JNDI
#
# Eg for JBoss: java:jboss/datasources/flowableDS
#
#spring.datasource.jndi-name==jdbc/flowableDS

# Set whether the lookup occurs in a J2EE container, i.e. if the prefix "java:comp/env/" needs to be added if the JNDI
# name doesn't already contain it. Default is "true".
#datasource.jndi.resourceRef=true

#
# Connection pool (see https://github.com/brettwooldridge/HikariCP#configuration-knobs-baby)
#

# 10 minutes
spring.datasource.hikari.maxLifetime=600000
# 5 minutes
spring.datasource.hikari.idleTimeout=300000
spring.datasource.hikari.minimumIdle=10
spring.datasource.hikari.maximumPoolSize=50
# test query for H2, MySQL, PostgreSQL and Microsoft SQL Server
#spring.datasource.hikari.connection-test-query=select 1
# test query for Oracle
#spring.datasource.hikari.connection-test-query=SELECT 1 FROM DUAL
# test query for DB2
#spring.datasource.hikari.connection-test-query=SELECT current date FROM sysibm.sysdummy1

#
# EMAIL
#

#flowable.mail.server.host=localhost
#flowable.mail.server.port=1025
#flowable.mail.server.username=
#flowable.mail.server.password=

#
# FLOWABLE
#

flowable.process.definition-cache-limit=512
#flowable.dmn.strict-mode=false
flowable.process.async.executor.default-async-job-acquire-wait-time-in-millis=5000
flowable.process.async.executor.default-timer-job-acquire-wait-time-in-millis=5000

flowable.cmmn.async.executor.default-async-job-acquire-wait-time-in-millis=5000
flowable.cmmn.async.executor.default-timer-job-acquire-wait-time-in-millis=5000

# The maximum file upload limit. Set to -1 to set to 'no limit'. Expressed in bytes
spring.servlet.multipart.max-file-size=10MB

# For development purposes, data folder is created inside the sources ./data folder
flowable.content.storage.root-folder=data/
flowable.content.storage.create-root=true

flowable.common.app.idm-url=http://localhost:8080/flowable-idm
flowable.common.app.idm-admin.user=admin
flowable.common.app.idm-admin.password=test

flowable.common.app.redirect-on-auth-success=http://localhost:8987/flowable-task
#flowable.modeler.app.deployment-api-url=http://localhost:8987/flowable-task/app-api

flowable.experimental.debugger.enabled=false

# Rest API in task application

# If false, disables the rest api in the task app
flowable.task.app.rest-enabled=true

# Configures the way user credentials are verified when doing a REST API call:
# 'any-user' : the user needs to exist and the password need to match. Any user is allowed to do the call (this is the pre 6.3.0 behavior)
# 'verify-privilege' : the user needs to exist, the password needs to match and the user needs to have the 'rest-api' privilege
# If nothing set, defaults to 'verify-privilege'
#flowable.rest.app.authentication-mode=verify-privilege
flowable.rest.app.authentication-mode=